CREATE OR REPLACE PACKAGE BODY eemrt.PKG_PROGRAMS 
AS
  /*  Package Body : PKG_PROGRAMS
      Author: Srihari Gokina
      Date Created : 06/27/2016
      Purpose:  All procedures related to Programs.
      Update history:   */
  
PROCEDURE SP_GET_PROGRAM_LOCATIONS(
      p_UserId          VARCHAR2,
      p_PROGRAM         VARCHAR2,
      PROGRAMLOCATIONS_CURSOR OUT SYS_REFCURSOR)  AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PKG_PROGRAMS.SP_GET_PROGRAM_LOCATIONS
    
   SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_GET_PROGRAM_LOCATIONS being called for Program = '|| p_PROGRAM );     
         
    OPEN PROGRAMLOCATIONS_CURSOR FOR 
      SELECT PGL_PROGRAM, PGL_LOCATION FROM PROGRAM_LOCATIONS
      WHERE PGL_PROGRAM = p_PROGRAM
      ORDER BY PGL_LOCATION_ORDER;  
  
  EXCEPTION
  WHEN OTHERS THEN
    OPEN PROGRAMLOCATIONS_CURSOR FOR SELECT NULL FROM DUAL;

END SP_GET_PROGRAM_LOCATIONS;

PROCEDURE SP_GET_PROGRAM_CLIN_TYPES(
      p_UserId          VARCHAR2,
      p_PROGRAM         VARCHAR2,
      PROGRAMCLINTYPES_CURSOR OUT SYS_REFCURSOR)  AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PKG_PROGRAMS.SP_GET_PROGRAM_LOCATIONS
    
   SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_GET_PROGRAM_CLIN_TYPES being called for Program = '|| p_PROGRAM );     
         
    OPEN PROGRAMCLINTYPES_CURSOR FOR 
      SELECT PCT_PROGRAM, PCT_CLIN_TYPE 
      FROM PROGRAM_CLIN_TYPES
      WHERE PCT_PROGRAM = p_PROGRAM
      ORDER BY PCT_CLINTYPE_ORDER;  
  
  EXCEPTION
  WHEN OTHERS THEN
    OPEN PROGRAMCLINTYPES_CURSOR FOR SELECT NULL FROM DUAL;

END  SP_GET_PROGRAM_CLIN_TYPES;

PROCEDURE SP_GET_PROGRAM_TASKORDER_TOTAL(
      p_UserId          VARCHAR2,
      p_PROGRAM         VARCHAR2,
      PROGRAMTASKORDERTOTAL_CURSOR OUT SYS_REFCURSOR) AS
  BEGIN        
    SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_GET_PROGRAM_TASKORDER_TOTAL being called for Program = '|| p_PROGRAM );        
    
    OPEN PROGRAMTASKORDERTOTAL_CURSOR FOR     
    SELECT SUM(CLIN_AMOUNT) AS Total_AMOUNT , SUM(CLIN_HOURS) AS Total_HOURS  
    FROM (  SELECT CLIN_HOURS,CLIN_AMOUNT
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN WORK_ORDERS_CLINS ON PERIOD_OF_PERFORMANCE_ID = WORK_ORDERS_CLINS.FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME =  p_PROGRAM
          UNION
            SELECT CLIN_HOURS,CLIN_AMOUNT 
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN SUB_TASKS_CLINS ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME =  p_PROGRAM
          UNION
            SELECT CLIN_HOURS,CLIN_AMOUNT
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN WORK_ORDERS_CLINS_SESSION ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME =  p_PROGRAM
          UNION
            SELECT CLIN_HOURS,CLIN_AMOUNT 
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN SUB_TASKS_CLINS_SESSION ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME =  p_PROGRAM
         );   
  EXCEPTION
  WHEN OTHERS THEN
    OPEN PROGRAMTASKORDERTOTAL_CURSOR FOR SELECT NULL FROM DUAL;
END  SP_GET_PROGRAM_TASKORDER_TOTAL;


PROCEDURE SP_GET_PROG_TO_TOTAL_CONTRACT(
      p_UserId          VARCHAR2,
      p_Contract        VARCHAR2,
      PROGRAMTASKORDERTOTAL_CURSOR OUT SYS_REFCURSOR) AS
  BEGIN        
    SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_GET_PROG_TO_TOTAL_CONTRACT being called for CONTRACT = '|| p_Contract );        
    
    OPEN PROGRAMTASKORDERTOTAL_CURSOR FOR     
    SELECT PGM_NAME, PGM_CEILING_AMOUNT, SUM(CLIN_AMOUNT) AS Total_TO_AMOUNT , SUM(CLIN_HOURS) AS Total_TO_HOURS  
    FROM (  SELECT PGM_NAME, PGM_CEILING_AMOUNT , CLIN_HOURS,CLIN_AMOUNT
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN WORK_ORDERS_CLINS ON PERIOD_OF_PERFORMANCE_ID = WORK_ORDERS_CLINS.FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME IN (SELECT  PGM_NAME FROM PROGRAM JOIN PROGRAM_CONTRACTS ON  PGM_ID = PGC_PGM_ID and PGC_CONTRACT_NUMBER = p_Contract)
          UNION
            SELECT PGM_NAME, PGM_CEILING_AMOUNT, CLIN_HOURS,CLIN_AMOUNT 
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN SUB_TASKS_CLINS ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME IN (SELECT  PGM_NAME FROM PROGRAM JOIN PROGRAM_CONTRACTS ON  PGM_ID = PGC_PGM_ID and PGC_CONTRACT_NUMBER = p_Contract)
          UNION
            SELECT PGM_NAME, PGM_CEILING_AMOUNT, CLIN_HOURS,CLIN_AMOUNT
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN WORK_ORDERS_CLINS_SESSION ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME IN (SELECT  PGM_NAME FROM PROGRAM JOIN PROGRAM_CONTRACTS ON  PGM_ID = PGC_PGM_ID and PGC_CONTRACT_NUMBER = p_Contract)
          UNION
            SELECT PGM_NAME, PGM_CEILING_AMOUNT, CLIN_HOURS,CLIN_AMOUNT 
            FROM PERIOD_OF_PERFORMANCE POP
            JOIN PROGRAM_CONTRACTS ON PGC_CONTRACT_NUMBER = CONTRACT_NUMBER
            JOIN PROGRAM ON PGM_ID = PGC_PGM_ID
            JOIN SUB_TASKS_CLINS_SESSION ON PERIOD_OF_PERFORMANCE_ID = FK_PERIOD_OF_PERFORMANCE_ID
            WHERE PGM_NAME IN (SELECT  PGM_NAME FROM PROGRAM JOIN PROGRAM_CONTRACTS ON  PGM_ID = PGC_PGM_ID and PGC_CONTRACT_NUMBER = p_Contract)
         )
         GROUP BY PGM_NAME, PGM_CEILING_AMOUNT;   
  EXCEPTION
  WHEN OTHERS THEN
    OPEN PROGRAMTASKORDERTOTAL_CURSOR FOR SELECT NULL FROM DUAL;
END  SP_GET_PROG_TO_TOTAL_CONTRACT;



PROCEDURE SP_GET_PROGRAM_COLOR_OF_MONEY(
      p_UserId          VARCHAR2,
      p_PROGRAM         VARCHAR2,
      PROGRAMCOLORMONEY_CURSOR OUT SYS_REFCURSOR)  AS
  BEGIN   
    
   SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_GET_PROGRAM_COLOR_OF_MONEY being called for Program = '|| p_PROGRAM );     
         
    OPEN PROGRAMCOLORMONEY_CURSOR FOR 
     SELECT PCM_COLOR_OF_MONEY FROM PROGRAM_COLOR_MONEY
     JOIN PROGRAM ON PGM_ID = PCM_PGM_ID
     WHERE PGM_NAME = p_PROGRAM
     ORDER BY PCM_COLOR_OF_MONEY;  
  
  EXCEPTION
  WHEN OTHERS THEN
    OPEN PROGRAMCOLORMONEY_CURSOR FOR SELECT NULL FROM DUAL;

END SP_GET_PROGRAM_COLOR_OF_MONEY;

PROCEDURE SP_ADD_INVOICE_HEADER(
      p_UserId          MITRE_INVOICE_HDR.MIH_CREATED_BY%TYPE,
      p_InvoiceNumber   MITRE_INVOICE_HDR.MIH_INVOICE_NUMBER%TYPE,
      p_PeriodStartDate MITRE_INVOICE_HDR.MIH_INVOICE_START_DATE%TYPE,
      p_PeriodEndDate   MITRE_INVOICE_HDR.MIH_INVOICE_END_DATE%TYPE,
      p_InvoiceDate     MITRE_INVOICE_HDR.MIH_INVOICE_RECEIVED_DATE%TYPE,
      p_InvoiceAmount   MITRE_INVOICE_HDR.MIH_INVOICE_AMOUNT%TYPE,
      p_ContractNumber  MITRE_INVOICE_HDR.MIH_CONTRACT_NUMBER%TYPE,
      p_PStatus         OUT VARCHAR2
  )  AS
  BEGIN   
    
    /*
      Created by: Sai Allu
      Created On: 07/22/2016
      Purpose   : Insert invoice header.
    */
    
   SP_INSERT_AUDIT(p_UserId,  'PKG_PROGRAM.SP_ADD_INVOICE_HEADER being called by ' || p_UserId );     
    
    INSERT INTO MITRE_INVOICE_HDR
    (
      MIH_CONTRACT_NUMBER,
      MIH_INVOICE_NUMBER,
      MIH_INVOICE_START_DATE,
      MIH_INVOICE_END_DATE,
      MIH_INVOICE_RECEIVED_DATE,
      MIH_INVOICE_AMOUNT,
      MIH_CREATED_BY,
      MIH_CREATED_ON
    )
    VALUES
    (
      p_ContractNumber,
      p_InvoiceNumber,
      p_PeriodStartDate,
      p_PeriodEndDate,
      p_InvoiceDate,
      p_InvoiceAmount,
      p_UserId,
      SYSDATE
    );
  
  IF SQL%FOUND THEN
    p_PStatus := 'SUCCESS';
    COMMIT;
  END IF;
  
  EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    P_Pstatus := 'Error inserting invoice upload ' || SQLERRM ;
    Sp_Insert_Audit( P_Userid, 'Error PKG_PROGRAMS.SP_ADD_INVOICE_HEADER ' || SQLERRM );
    
END SP_ADD_INVOICE_HEADER;

END PKG_PROGRAMS;
/