CREATE OR REPLACE PACKAGE BODY eemrt."PKG_SUB_CONTRACTOR" 
AS
  /*
  Procedure : PKG_SUB_CONTRACTOR
  Author: Sridhar Kommana
  Date Created : 07/13/2015
  Purpose:  Insert Update Delete Sub Contractor records for eCert
  Update history:
    10/20/2015 Added  new proc SP_GET_CONTRACTORS   : to get contractor details
    
  */
  PROCEDURE INSERT_SUB_CONTRACTOR(
      p_VENDOR_NAME     IN SUB_CONTRACTOR.VENDOR_NAME%TYPE DEFAULT NULL,
      p_CONTRACT_NUMBER IN SUB_CONTRACTOR.CONTRACT_NUMBER%TYPE DEFAULT NULL,
      p_POC_FNAME       IN SUB_CONTRACTOR.POC_FNAME%TYPE DEFAULT NULL,
      p_POC_LNAME       IN SUB_CONTRACTOR.POC_LNAME%TYPE DEFAULT NULL,
      p_POC_MNAME       IN SUB_CONTRACTOR.POC_MNAME%TYPE DEFAULT NULL,
      p_SMALL_BUSINESS  IN SUB_CONTRACTOR.SMALL_BUSINESS%TYPE DEFAULT NULL,
      p_CREATED_BY      IN SUB_CONTRACTOR.CREATED_BY%TYPE DEFAULT NULL,
      p_ID OUT SUB_CONTRACTOR.SUB_CONTRACTOR_ID%TYPE,
      p_PStatus OUT VARCHAR2)
  AS
    v_SUB_CONTRACTOR_ID NUMBER:=0;
  BEGIN
    v_SUB_CONTRACTOR_ID := Sub_Contractor_SEQ.NEXTVAL;
    SP_INSERT_AUDIT( p_CREATED_BY,'PKG_SUB_CONTRACTOR.INSERT_SUB_CONTRACTOR v_SUB_CONTRACTOR_ID= '||v_SUB_CONTRACTOR_ID||' p_VENDOR_NAME='||p_VENDOR_NAME||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
    INSERT
    INTO SUB_CONTRACTOR
      (
        SUB_CONTRACTOR_ID,
        VENDOR_NAME,
        CONTRACT_NUMBER,
        POC_FNAME,
        POC_LNAME,
        POC_MNAME,
        SMALL_BUSINESS,
        CREATED_BY,
        CREATED_ON
      )
      VALUES
      (
        v_SUB_CONTRACTOR_ID ,
        p_VENDOR_NAME,
        p_CONTRACT_NUMBER,
        p_POC_FNAME,
        p_POC_LNAME,
        p_POC_MNAME,
        p_SMALL_BUSINESS,
        p_CREATED_BY,
        sysdate()
      );
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ;
      p_ID      := v_SUB_CONTRACTOR_ID;
      COMMIT;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error inserting SUB_CONTRACTOR '||SQLERRM ;
    SP_INSERT_AUDIT( p_CREATED_BY,'Error PKG_SUB_CONTRACTOR.INSERT_SUB_CONTRACTOR'||'||SQLERRM|| v_SUB_CONTRACTOR_ID= '||v_SUB_CONTRACTOR_ID||' p_VENDOR_NAME='||p_VENDOR_NAME||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
  END INSERT_SUB_CONTRACTOR;
  PROCEDURE UPDATE_SUB_CONTRACTOR
    (
      p_SUB_CONTRACTOR_ID IN SUB_CONTRACTOR.SUB_CONTRACTOR_ID%TYPE DEFAULT NULL,
      p_VENDOR_NAME       IN SUB_CONTRACTOR.VENDOR_NAME%TYPE DEFAULT NULL,
      p_CONTRACT_NUMBER   IN SUB_CONTRACTOR.CONTRACT_NUMBER%TYPE DEFAULT NULL,
      p_POC_FNAME         IN SUB_CONTRACTOR.POC_FNAME%TYPE DEFAULT NULL,
      p_POC_LNAME         IN SUB_CONTRACTOR.POC_LNAME%TYPE DEFAULT NULL,
      p_POC_MNAME         IN SUB_CONTRACTOR.POC_MNAME%TYPE DEFAULT NULL,
      p_SMALL_BUSINESS    IN SUB_CONTRACTOR.SMALL_BUSINESS%TYPE DEFAULT NULL,
      p_LAST_MODIFIED_BY  IN SUB_CONTRACTOR.CREATED_BY%TYPE DEFAULT NULL,
      p_PStatus OUT VARCHAR2
    )
  AS
  BEGIN
    SP_INSERT_AUDIT( p_LAST_MODIFIED_BY,'PKG_SUB_CONTRACTOR.UPDATE_SUB_CONTRACTOR p_SUB_CONTRACTOR_ID= '||p_SUB_CONTRACTOR_ID||' p_VENDOR_NAME='||p_VENDOR_NAME||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
    UPDATE SUB_CONTRACTOR
    SET VENDOR_NAME         = p_VENDOR_NAME,
      CONTRACT_NUMBER       = p_CONTRACT_NUMBER,
      POC_FNAME             = p_POC_FNAME,
      POC_LNAME             = p_POC_LNAME,
      POC_MNAME             = p_POC_MNAME,
      SMALL_BUSINESS        = p_SMALL_BUSINESS,
      LAST_MODIFIED_BY      = p_LAST_MODIFIED_BY,
      LAST_MODIFIED_ON      = sysdate()
    WHERE SUB_CONTRACTOR_ID = p_SUB_CONTRACTOR_ID;
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ;
      COMMIT;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error updating SUB_CONTRACTOR '||SQLERRM ;
    SP_INSERT_AUDIT( p_LAST_MODIFIED_BY,'Error PKG_SUB_CONTRACTOR.UPDATE_SUB_CONTRACTOR'||'||SQLERRM|| p_SUB_CONTRACTOR_ID= '||p_SUB_CONTRACTOR_ID||' p_VENDOR_NAME='||p_VENDOR_NAME||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
  END UPDATE_SUB_CONTRACTOR;
  PROCEDURE DELETE_SUB_CONTRACTOR(
      p_SUB_CONTRACTOR_ID IN SUB_CONTRACTOR.SUB_CONTRACTOR_ID%TYPE DEFAULT NULL,
      p_LAST_MODIFIED_BY  IN SUB_CONTRACTOR.CREATED_BY%TYPE DEFAULT NULL,
      p_PStatus OUT VARCHAR2)
  AS
  BEGIN
    SP_INSERT_AUDIT( p_LAST_MODIFIED_BY,'PKG_SUB_CONTRACTOR.DELETE_SUB_CONTRACTOR p_SUB_CONTRACTOR_ID= '||p_SUB_CONTRACTOR_ID);
    DELETE FROM SUB_CONTRACTOR WHERE SUB_CONTRACTOR_ID = p_SUB_CONTRACTOR_ID;
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ;
      COMMIT;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error deleting SUB_CONTRACTOR '||SQLERRM ;
    SP_INSERT_AUDIT( p_LAST_MODIFIED_BY,'Error PKG_SUB_CONTRACTOR.DELETE_SUB_CONTRACTOR'||'||SQLERRM|| p_SUB_CONTRACTOR_ID= '||p_SUB_CONTRACTOR_ID);
  END DELETE_SUB_CONTRACTOR;
  PROCEDURE SP_GET_SUB_CONTRACTOR(
      p_UserId            VARCHAR2 DEFAULT NULL ,
      p_SUB_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      p_VENDOR_NAME       VARCHAR2 DEFAULT NULL ,
      p_CONTRACT_NUMBER   VARCHAR2 DEFAULT NULL ,
      REC_CURSOR OUT SYS_REFCURSOR)
  AS
  BEGIN
    SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_SUB_CONTRACTOR  P_SUB_CONTRACTOR_ID= '||P_SUB_CONTRACTOR_ID||' P_SUB_CONTRACTOR_ID='||P_SUB_CONTRACTOR_ID);
    OPEN REC_CURSOR FOR SELECT SUB_CONTRACTOR_ID,
    VENDOR_NAME,
    CONTRACT_NUMBER ,
    POC_FNAME ,
    POC_FNAME,
    POC_FNAME ,
    SMALL_BUSINESS FROM SUB_CONTRACTOR WHERE (SUB_CONTRACTOR_ID = p_SUB_CONTRACTOR_ID OR p_SUB_CONTRACTOR_ID= 0) AND (VENDOR_NAME = p_VENDOR_NAME OR p_VENDOR_NAME IS NULL) AND (CONTRACT_NUMBER = p_CONTRACT_NUMBER OR p_CONTRACT_NUMBER IS NULL) ORDER BY 1;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN REC_CURSOR FOR SELECT 1 FROM SUB_CONTRACTOR ;
  END SP_GET_SUB_CONTRACTOR;
  PROCEDURE SP_GET_CONTRACTORS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      p_CONTRACT_NUMBER VARCHAR2,
      REC_CURSOR OUT SYS_REFCURSOR)
  AS
  BEGIN
    SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_CONTRACTORS  p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);
    OPEN REC_CURSOR FOR SELECT CONTRACTOR_ID,
    FIRST_NAME,
    MIDDLE_NAME,
    LAST_NAME,
    EMAIL,
    VENDOR,
    WORK_ORDER_ID WORK_ORDER_Number,
    WORK_ORDER_ID WORK_ORDER_Title,
    SUBTASK_ID SUBTASK_Number,
    SUBTASK_ID SUBTASK_Title,
    CLIN_ID CLIN_NUMBER,
    LABOR_CATEGORY_ID LABOR_CATEGORY FROM CONTRACTORS 
    WHERE (CONTRACTOR_ID = p_CONTRACTOR_ID OR p_CONTRACTOR_ID= 0)
     AND (CONTRACT_NUMBER = p_CONTRACT_NUMBER)
    ORDER BY 1;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN REC_CURSOR FOR SELECT 1 FROM CONTRACTORS ;
  END SP_GET_CONTRACTORS;
  
  PROCEDURE SP_GET_CONTRACTORS_T(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      p_CONTRACT_NUMBER VARCHAR2,
      REC_CURSOR OUT SYS_REFCURSOR)
  AS
  BEGIN
    SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_CONTRACTORS_T  p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);
    OPEN REC_CURSOR FOR 
    SELECT 
    CONTRACTOR_ID,
    FIRST_NAME,
    MIDDLE_NAME,
    LAST_NAME,
    LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
    EMAIL,
    VENDOR,
    CONTRACT_NUMBER,
    upper(LAST_NAME)
    FROM CONTRACTORS_T 
    WHERE (CONTRACTOR_ID = p_CONTRACTOR_ID OR p_CONTRACTOR_ID= 0)
     AND (CONTRACT_NUMBER = p_CONTRACT_NUMBER OR p_CONTRACT_NUMBER IS NULL)
    ORDER BY 9 asc ,1;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN REC_CURSOR FOR SELECT 1 FROM CONTRACTORS_T ;
  END SP_GET_CONTRACTORS_T;  
  PROCEDURE SP_INSERT_CONTRACTOR_T(
          p_CREATED_BY CONTRACTORS_T.CREATED_BY%TYPE, 
          p_FIRST_NAME CONTRACTORS_T.FIRST_NAME%TYPE,
          p_MIDDLE_NAME CONTRACTORS_T.MIDDLE_NAME%TYPE,
          p_LAST_NAME CONTRACTORS_T.LAST_NAME%TYPE,
          p_EMAIL CONTRACTORS_T.EMAIL%TYPE,
          p_VENDOR CONTRACTORS_T.VENDOR%TYPE,
          p_CONTRACT_NUMBER CONTRACTORS_T.CONTRACT_NUMBER%TYPE,
          p_ID OUT CONTRACTORS_T.CONTRACTOR_ID%TYPE,
          p_PStatus OUT VARCHAR2)
  AS
    v_CONTRACTOR_ID NUMBER:=0;
  BEGIN
    v_CONTRACTOR_ID := TOS_CONTRACTOR_SEQ.NEXTVAL;
    SP_INSERT_AUDIT( p_CREATED_BY,'PKG_SUB_CONTRACTOR.SP_INSERT_CONTRACTOR_T v_CONTRACTOR_ID= '||v_CONTRACTOR_ID||' p_VENDOR='||p_VENDOR||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
    INSERT
    INTO CONTRACTORS_T
      (
        CONTRACTOR_ID,
        FIRST_NAME,
        MIDDLE_NAME,
        LAST_NAME,
        EMAIL,
        VENDOR,
        CONTRACT_NUMBER,
        CREATED_BY,
        CREATED_ON
      )
      VALUES
      (
        v_CONTRACTOR_ID , 
        p_FIRST_NAME,
        p_MIDDLE_NAME,
        p_LAST_NAME,
        p_EMAIL,
        p_VENDOR,
        p_CONTRACT_NUMBER,
        p_CREATED_BY,
        sysdate()
      );
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ;
      p_ID      := v_CONTRACTOR_ID;
      COMMIT;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error inserting  CONTRACTOR_T '||SQLERRM ;
    SP_INSERT_AUDIT( p_CREATED_BY,'Error PKG_SUB_CONTRACTOR.SP_INSERT_CONTRACTOR_T'||'||SQLERRM|| v_CONTRACTOR_ID= '||v_CONTRACTOR_ID||' p_VENDOR='||p_VENDOR||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
  END SP_INSERT_CONTRACTOR_T;
  
  PROCEDURE SP_UPDATE_CONTRACTOR_T(
          p_userid CONTRACTORS_T.CREATED_BY%TYPE, 
          p_CONTRACTOR_ID CONTRACTORS_T.CONTRACTOR_ID%TYPE,          
          p_FIRST_NAME CONTRACTORS_T.FIRST_NAME%TYPE,
          p_MIDDLE_NAME CONTRACTORS_T.MIDDLE_NAME%TYPE,
          p_LAST_NAME CONTRACTORS_T.LAST_NAME%TYPE,
          p_EMAIL CONTRACTORS_T.EMAIL%TYPE,
          p_VENDOR CONTRACTORS_T.VENDOR%TYPE,
          p_CONTRACT_NUMBER CONTRACTORS_T.CONTRACT_NUMBER%TYPE,          
          p_PStatus OUT VARCHAR2)
  AS
  BEGIN
    
    SP_INSERT_AUDIT( p_userid,'PKG_SUB_CONTRACTOR.SP_UPDATE_CONTRACTOR_T p_CONTRACTOR_ID= '||p_CONTRACTOR_ID||' p_VENDOR='||p_VENDOR||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
    Update
      CONTRACTORS_T 
      SET 
        FIRST_NAME =  p_FIRST_NAME,
        MIDDLE_NAME  = p_MIDDLE_NAME,
        LAST_NAME  = p_LAST_NAME ,
        EMAIL  = p_EMAIL,
        VENDOR  = p_VENDOR,
        CONTRACT_NUMBER  = p_CONTRACT_NUMBER,
        UPDATED_BY = p_userid ,
        CREATED_ON = sysdate() 
      WHERE  CONTRACTOR_ID =  p_CONTRACTOR_ID ;
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ; 
      COMMIT;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error updating  CONTRACTOR_T '||SQLERRM ;
    SP_INSERT_AUDIT( p_userid,'Error PKG_SUB_CONTRACTOR.SP_UPDATE_CONTRACTOR_T'||'||SQLERRM|| p_CONTRACTOR_ID= '||p_CONTRACTOR_ID||' p_VENDOR='||p_VENDOR||'  p_CONTRACT_NUMBER='||p_CONTRACT_NUMBER);
 END SP_UPDATE_CONTRACTOR_T;  
 
   PROCEDURE Delete_CONTRACTOR_T(
      p_UserId        VARCHAR2 ,
      p_CONTRACTOR_ID    IN CONTRACTORS_T.CONTRACTOR_ID%TYPE,
      p_PStatus OUT VARCHAR2
      )
      AS
      BEGIN 
    SP_INSERT_AUDIT( p_UserId,'PKG_SUB_CONTRACTOR.Delete_CONTRACTOR_T p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);
    DELETE FROM  CONTRACTORS_T
        WHERE CONTRACTOR_ID = p_CONTRACTOR_ID;
       IF SQL%FOUND THEN
        p_PStatus := 'SUCCESS' ;
        COMMIT;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error deleting CONTRACTORS_T '||SQLERRM ;
    SP_INSERT_AUDIT( p_UserId,'Error PKG_SUB_CONTRACTOR.Delete_CONTRACTOR_T'||'||SQLERRM|| p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);           
      
  END Delete_CONTRACTOR_T ;           
     
  PROCEDURE SP_GET_CONTRACTORS_TOS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      P_CONTRACTOR_TOID NUMBER DEFAULT 0 ,
      REC_CURSOR OUT SYS_REFCURSOR)
  AS
  BEGIN
    SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_CONTRACTORS_TOS  p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);
    OPEN REC_CURSOR FOR 
    SELECT 
    CONTRACTOR_TOID,
    CONTRACTOR_ID,
    VENDOR_NAME,
    WORK_ORDER_ID WORK_ORDER_Number,
    WORK_ORDER_ID WORK_ORDER_Title,
    SUBTASK_ID SUBTASK_Number,
    SUBTASK_ID SUBTASK_Title,
    CLIN_ID CLIN_NUMBER,
    LABOR_CATEGORY_ID LABOR_CATEGORY FROM CONTRACTORS_TASKSORDERS 
    WHERE (CONTRACTOR_ID = p_CONTRACTOR_ID OR p_CONTRACTOR_ID= 0)
    AND (CONTRACTOR_TOID = p_CONTRACTOR_TOID OR p_CONTRACTOR_TOID= 0) 
     
    ORDER BY 1;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN REC_CURSOR FOR SELECT 1 FROM CONTRACTORS_TASKSORDERS ;
  END SP_GET_CONTRACTORS_TOS;
      
  PROCEDURE INSERT_TASK_CONTRACTORS(
      p_CONTRACTOR_ID         IN TASK_CONTRACTORS.CONTRACTOR_ID%TYPE DEFAULT NULL,
      p_WORK_ORDER_ID         IN TASK_CONTRACTORS.WORK_ORDER_ID%TYPE DEFAULT NULL,
      p_SUBTASK_ID            IN TASK_CONTRACTORS.SUBTASK_ID%TYPE DEFAULT NULL,
      p_CLIN_ID               IN TASK_CONTRACTORS.CLIN_ID%TYPE DEFAULT NULL,
      p_SUB_CLIN_ID           IN TASK_CONTRACTORS.SUB_CLIN_ID%TYPE DEFAULT NULL,      
      p_LABOR_CATEGORY_ID     IN TASK_CONTRACTORS.LABOR_CATEGORY_ID%TYPE DEFAULT NULL, 
      p_WOC_ID     IN TASK_CONTRACTORS.WOC_ID%TYPE DEFAULT NULL, 
      p_STC_ID     IN TASK_CONTRACTORS.STC_ID%TYPE DEFAULT NULL, 
      p_CREATED_BY      IN TASK_CONTRACTORS.CREATED_BY%TYPE DEFAULT NULL,
      p_PStatus OUT VARCHAR2
      ) AS
    v_TASK_CONTRACTOR_ID NUMBER:=0;
  BEGIN
    v_TASK_CONTRACTOR_ID := TASK_CONTRACTORS_SEQ.NEXTVAL;
    SP_INSERT_AUDIT( p_CREATED_BY,'PKG_SUB_CONTRACTOR.INSERT_TASK_CONTRACTORS p_CONTRACTOR_ID= '||p_CONTRACTOR_ID||' p_WORK_ORDER_ID='||p_WORK_ORDER_ID||'  p_CLIN_ID='||p_CLIN_ID);
    INSERT
    INTO TASK_CONTRACTORS
      (
        TASK_CONTRACTOR_ID,
        CONTRACTOR_ID,
        WORK_ORDER_ID,
        SUBTASK_ID,
        CLIN_ID,
        SUB_CLIN_ID,
        LABOR_CATEGORY_ID,
        WOC_ID,
        STC_ID,
        CREATED_BY,
        CREATED_ON
      )
      VALUES
      (
        v_TASK_CONTRACTOR_ID,
        p_CONTRACTOR_ID,
        p_WORK_ORDER_ID,
        p_SUBTASK_ID,
        p_CLIN_ID,
        p_SUB_CLIN_ID,
        p_LABOR_CATEGORY_ID, 
        p_WOC_ID,
        p_STC_ID,
        p_CREATED_BY,
        sysdate()
      );
    IF SQL%FOUND THEN
      p_PStatus := 'SUCCESS' ;
      COMMIT;
    END IF;
  EXCEPTION
     WHEN DUP_VAL_ON_INDEX
      THEN
         ROLLBACK;        
         p_PStatus := 'Task already assigned';
     
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error inserting TASK_CONTRACTORS '||SQLERRM ;
    SP_INSERT_AUDIT( p_CREATED_BY,'Error PKG_SUB_CONTRACTOR.INSERT_TASK_CONTRACTORS'||'||SQLERRM||  p_CONTRACTOR_ID= '||p_CONTRACTOR_ID||' p_WORK_ORDER_ID='||p_WORK_ORDER_ID||'  p_CLIN_ID='||p_CLIN_ID);
  END INSERT_TASK_CONTRACTORS;      
  PROCEDURE Update_TASK_CONTRACTORS(
      p_TASK_CONTRACTOR_ID    IN TASK_CONTRACTORS.TASK_CONTRACTOR_ID%TYPE DEFAULT NULL,
      p_CONTRACTOR_ID         IN TASK_CONTRACTORS.CONTRACTOR_ID%TYPE DEFAULT NULL, 
      p_WORK_ORDER_ID         IN TASK_CONTRACTORS.WORK_ORDER_ID%TYPE DEFAULT NULL,
      p_SUBTASK_ID            IN TASK_CONTRACTORS.SUBTASK_ID%TYPE DEFAULT NULL,
      p_CLIN_ID               IN TASK_CONTRACTORS.CLIN_ID%TYPE DEFAULT NULL,
      p_SUB_CLIN_ID           IN TASK_CONTRACTORS.SUB_CLIN_ID%TYPE DEFAULT NULL,      
      p_LABOR_CATEGORY_ID     IN TASK_CONTRACTORS.LABOR_CATEGORY_ID%TYPE DEFAULT NULL,
      p_Updated_BY            IN TASK_CONTRACTORS.Updated_BY%TYPE DEFAULT NULL,
      p_PStatus OUT VARCHAR2
      ) AS

  BEGIN
    
    SP_INSERT_AUDIT( p_Updated_BY,'PKG_SUB_CONTRACTOR.Update_TASK_CONTRACTORS p_TASK_CONTRACTOR_ID= '||p_TASK_CONTRACTOR_ID||' p_WORK_ORDER_ID='||p_WORK_ORDER_ID||'  p_CLIN_ID='||p_CLIN_ID);
    Update TASK_CONTRACTORS
      set 
         
        CONTRACTOR_ID   = p_CONTRACTOR_ID ,
        WORK_ORDER_ID  = p_WORK_ORDER_ID ,
        SUBTASK_ID  = p_SUBTASK_ID,
        CLIN_ID = p_CLIN_ID,
        SUB_CLIN_ID = p_SUB_CLIN_ID,
        LABOR_CATEGORY_ID = p_LABOR_CATEGORY_ID,
        Updated_BY = p_Updated_BY,
        Updated_on  = sysdate()
        WHERE TASK_CONTRACTOR_ID = p_TASK_CONTRACTOR_ID;
       IF SQL%FOUND THEN
        p_PStatus := 'SUCCESS' ;
        COMMIT;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error updating TASK_CONTRACTORS '||SQLERRM ;
    SP_INSERT_AUDIT( p_Updated_BY,'Error PKG_SUB_CONTRACTOR.Update_TASK_CONTRACTORS'||'||SQLERRM|| p_TASK_CONTRACTOR_ID= '||p_TASK_CONTRACTOR_ID);
  END Update_TASK_CONTRACTORS  ;    
  PROCEDURE Delete_TASK_CONTRACTORS(
      p_UserId        VARCHAR2  ,
      p_TASK_CONTRACTOR_ID    IN TASK_CONTRACTORS.TASK_CONTRACTOR_ID%TYPE DEFAULT NULL,
      p_PStatus OUT VARCHAR2
      ) AS
  BEGIN    
    SP_INSERT_AUDIT( p_UserId,'PKG_SUB_CONTRACTOR.Delete_TASK_CONTRACTORS p_TASK_CONTRACTOR_ID= '||p_TASK_CONTRACTOR_ID);
    DELETE FROM  TASK_CONTRACTORS
        WHERE TASK_CONTRACTOR_ID = p_TASK_CONTRACTOR_ID;
       IF SQL%FOUND THEN
        p_PStatus := 'SUCCESS' ;
        COMMIT;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    p_PStatus := 'Error deleting TASK_CONTRACTORS '||SQLERRM ;
    SP_INSERT_AUDIT( p_UserId,'Error PKG_SUB_CONTRACTOR.Delete_TASK_CONTRACTORS'||'||SQLERRM|| p_TASK_CONTRACTOR_ID= '||p_TASK_CONTRACTOR_ID);
  END Delete_TASK_CONTRACTORS 
      ;       
  PROCEDURE SP_GET_TASK_CONTRACTORS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      p_TASK_CONTRACTOR_ID NUMBER DEFAULT 0 ,
      REC_CURSOR OUT SYS_REFCURSOR)
  /*
  Procedure : SP_GET_TASK_CONTRACTORS
  Author: Sridhar Kommana
  Date Created : 10/20/2015
  Purpose:  get Sub Contractor records for eCert 
  Update history:  03/21/2016 Added outer join to Work orders to support  RTM ID:W00a-10 
                   05/23/2016 Srihari Gokina, Changed labor_category to clin_labor_category.
                   05/23/2016 Sridhar Kommana Changed Labor category name retrieval criteria DECODE(PC.HASLABORCATEGORIES)
  */      
      AS 
      BEGIN 
         SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_TASK_CONTRACTORS  p_CONTRACTOR_ID= '||p_CONTRACTOR_ID);
          OPEN REC_CURSOR FOR 
          SELECT 
          TC.CONTRACTOR_ID,
          FIRST_NAME,
          MIDDLE_NAME,
          LAST_NAME,
          LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
          EMAIL,
          VENDOR,
          CONTRACT_NUMBER,
          upper(LAST_NAME), 
          TASK_CONTRACTOR_ID, 
          WORK_ORDER_ID,
          SUBTASK_ID,
          TC.CLIN_ID,
          SUB_CLIN_ID,          
          TC.LABOR_CATEGORY_ID  ,
          TOS.WORK_ORDER_NUMBER, 
          TOS.WORK_ORDER_Title,
          STS.SUB_TASK_NUMBER,
          STS.SUB_TASK_Title, 
          TC.WOC_ID, 
          TC.STC_ID, 
          PC.CLIN_NUMBER, 
  /*    --   DECODE(PC.CLIN_TYPE,'Labor', (select distinct  category_name from labor_categories where category_id=TC.LABOR_CATEGORY_ID  ),    -- 05/23/2016 Srihari Gokina, Commented to get Labor Cat Name
          DECODE(PC.CLIN_TYPE,'Labor', (select distinct  labor_category_title from clin_labor_category where LABOR_CATEGORY_ID=TC.LABOR_CATEGORY_ID  ), 
          'Contract', (select labor_category_title from clin_labor_category where labor_category_id=TC.LABOR_CATEGORY_ID), 'Non Labor') as LABOR_CATEGORY_NAME
          */
          
          DECODE(PC.HASLABORCATEGORIES ,'N', (select distinct  category_name from labor_categories where category_id=TC.LABOR_CATEGORY_ID  ), 
          'Y', (select labor_category_title from clin_labor_category where labor_category_id=TC.LABOR_CATEGORY_ID), 'Non Labor') as LABOR_CATEGORY_NAME
            
          FROM TASK_CONTRACTORS TC inner join CONTRACTORS_T CT on TC.CONTRACTOR_ID = CT.CONTRACTOR_ID          
          LEFT OUTER JOIN ( select WO.WORK_ORDERS_ID, WO.WORK_ORDER_NUMBER, WO.WORK_ORDER_Title from Work_orders WO  ) TOS  ON TOS.WORK_ORDERS_ID = TC.WORK_ORDER_ID  
          INNER JOIN POP_CLIN PC ON PC.clin_id = TC.clin_id
          --INNER JOIN ( select ST.SUB_TASKS_ID , ST.WORK_ORDERS_ID, ST.SUB_TASK_NUMBER, ST.SUB_TASK_Title from  sub_tasks ST ) STS  ON            STS.work_orders_id = TC.Work_order_id AND TC.SUBTASK_ID = STS.SUB_TASKS_ID
          LEFT OUTER  JOIN ( select ST.SUB_TASKS_ID , ST.WORK_ORDERS_ID, ST.SUB_TASK_NUMBER, ST.SUB_TASK_Title from  sub_tasks ST ) STS          ON  STS.work_orders_id = TC.Work_order_id   AND TC.SUBTASK_ID = STS.SUB_TASKS_ID
          WHERE (TC.CONTRACTOR_ID = p_CONTRACTOR_ID OR p_CONTRACTOR_ID= 0)
           AND (TASK_CONTRACTOR_ID = p_TASK_CONTRACTOR_ID OR p_TASK_CONTRACTOR_ID = 0 )          
          ORDER BY 9 asc ,1;
        EXCEPTION
        WHEN OTHERS THEN
          OPEN REC_CURSOR FOR SELECT 1 FROM TASK_CONTRACTORS ;      
      END SP_GET_TASK_CONTRACTORS;
      
  PROCEDURE SP_GET_All_TASK_CONTRACTORS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACT_NUMBER VARCHAR2 DEFAULT NULL ,
      p_WORK_ORDER_ID         IN TASK_CONTRACTORS.WORK_ORDER_ID%TYPE DEFAULT 0,
      p_SUBTASK_ID            IN TASK_CONTRACTORS.SUBTASK_ID%TYPE DEFAULT 0,
      p_CLIN_ID NUMBER  DEFAULT 0,
      p_SUB_CLIN_ID NUMBER DEFAULT 0,
      p_LABOR_CATEGORY_ID  NUMBER  DEFAULT 0,              
      REC_CURSOR OUT SYS_REFCURSOR)      AS 
      BEGIN 
         SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_All_TASK_CONTRACTORS  p_CONTRACT_NUMBER= '||p_CONTRACT_NUMBER);
          OPEN REC_CURSOR FOR 
          SELECT 
            TC.CONTRACTOR_ID,
            FIRST_NAME,
            MIDDLE_NAME,
            LAST_NAME,
            LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
            EMAIL,
            VENDOR,
            CONTRACT_NUMBER,
            upper(LAST_NAME), 
            TASK_CONTRACTOR_ID, 
            WORK_ORDER_ID,
            SUBTASK_ID,
            CLIN_ID,
            SUB_CLIN_ID,
            LABOR_CATEGORY_ID,
            TC.WOC_ID, 
            TC.STC_ID  
            FROM CONTRACTORS_T CT left outer join  TASK_CONTRACTORS TC ON CT.CONTRACTOR_ID = TC.CONTRACTOR_ID
            WHERE (CONTRACT_NUMBER = p_CONTRACT_NUMBER OR p_CONTRACT_NUMBER is null)
             AND (WORK_ORDER_ID = p_WORK_ORDER_ID OR p_WORK_ORDER_ID = 0 )
             AND (SUBTASK_ID = p_SUBTASK_ID OR p_SUBTASK_ID = 0 )           
             AND (CLIN_ID = p_CLIN_ID OR p_CLIN_ID = 0 )           
             AND (SUB_CLIN_ID = p_SUB_CLIN_ID OR p_SUB_CLIN_ID = 0 )           
            AND (LABOR_CATEGORY_ID = p_LABOR_CATEGORY_ID or p_LABOR_CATEGORY_ID = 0)           
          ORDER BY 9 asc ,1;
        EXCEPTION
        WHEN OTHERS THEN
          OPEN REC_CURSOR FOR SELECT 1 FROM TASK_CONTRACTORS ;  
      END SP_GET_All_TASK_CONTRACTORS;   

  PROCEDURE SP_GET_CLIN_TASK_CONTRACTORS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACT_NUMBER VARCHAR2 DEFAULT NULL ,
      p_WORK_ORDER_ID         IN TASK_CONTRACTORS.WORK_ORDER_ID%TYPE DEFAULT 0,
      p_SUBTASK_ID            IN TASK_CONTRACTORS.SUBTASK_ID%TYPE DEFAULT 0,
      p_CLIN_ID NUMBER  DEFAULT 0,
      p_SUB_CLIN_ID NUMBER DEFAULT 0,
      p_LABOR_CATEGORY_ID  NUMBER  DEFAULT 0,              
      REC_CURSOR OUT SYS_REFCURSOR)      AS 
 /*Procedure : SP_GET_CLIN_TASK_CONTRACTORS
  Author: Sridhar Kommana
  Date Created : 06/14/2016
  Purpose:  Give contractors for a particular clin
  Update history:
  07/07/2016 sridhar kommana modified proc, commented paramter 0 part for RTMID=236*/      
      v_HasLCs VARCHAR2(2) ;
      BEGIN 
         SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_CLIN_TASK_CONTRACTORS  p_CONTRACT_NUMBER= '||p_CONTRACT_NUMBER
        ||'  p_WORK_ORDER_ID= '||p_WORK_ORDER_ID
         ||' p_SUBTASK_ID= '||p_SUBTASK_ID
         ||' p_SUBTASK_ID= '||p_SUBTASK_ID
         ||' p_CLIN_ID= '||p_CLIN_ID
         ||' p_SUB_CLIN_ID= '||p_SUB_CLIN_ID         
         ||' p_LABOR_CATEGORY_ID= '||p_LABOR_CATEGORY_ID   
         );
         select HASLABORCATEGORIES into v_HasLCs from pop_clin where clin_id = p_clin_id;
         if v_HasLCs = 'Y' then 
         BEGIN 
          OPEN REC_CURSOR FOR 
          SELECT DISTINCT
            CT.CONTRACTOR_ID,
            FIRST_NAME,
            MIDDLE_NAME,
            LAST_NAME,
            LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
            EMAIL,
            VENDOR,
            CONTRACT_NUMBER,
            upper(LAST_NAME), 
          --  TASK_CONTRACTOR_ID, 
       --    WORK_ORDER_ID,
         --   SUBTASK_ID,
             CLIN_ID,
            SUB_CLIN_ID,
            LABOR_CATEGORY_ID
          --  TC.WOC_ID, 
           -- TC.STC_ID  
            FROM CONTRACTORS_T CT left outer join  TASK_CONTRACTORS TC ON CT.CONTRACTOR_ID = TC.CONTRACTOR_ID
            WHERE (CONTRACT_NUMBER = p_CONTRACT_NUMBER) -- OR p_CONTRACT_NUMBER is null)
             AND (WORK_ORDER_ID = p_WORK_ORDER_ID) -- OR p_WORK_ORDER_ID = 0 )
             AND (SUBTASK_ID = p_SUBTASK_ID) -- OR p_SUBTASK_ID = 0 )           
             AND (CLIN_ID = p_CLIN_ID) -- OR p_CLIN_ID = 0 )           
             AND (SUB_CLIN_ID = p_SUB_CLIN_ID) -- OR p_SUB_CLIN_ID = 0 )           
            AND (LABOR_CATEGORY_ID = p_LABOR_CATEGORY_ID)-- or p_LABOR_CATEGORY_ID = 0)           
          ORDER BY 9 asc ,1;
          END;
          ELSE
          BEGIN 
             OPEN REC_CURSOR FOR 
          SELECT DISTINCT
            CT.CONTRACTOR_ID,
            FIRST_NAME,
            MIDDLE_NAME,
            LAST_NAME,
            LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
            EMAIL,
            VENDOR,
            CONTRACT_NUMBER,
            upper(LAST_NAME), 
          --  TASK_CONTRACTOR_ID, 
       --    WORK_ORDER_ID,
         --   SUBTASK_ID,
             CLIN_ID,
            SUB_CLIN_ID,
            LABOR_CATEGORY_ID
          --  TC.WOC_ID, 
           -- TC.STC_ID  
            FROM CONTRACTORS_T CT left outer join  TASK_CONTRACTORS TC ON CT.CONTRACTOR_ID = TC.CONTRACTOR_ID
            WHERE (CONTRACT_NUMBER = p_CONTRACT_NUMBER) -- OR p_CONTRACT_NUMBER is null)
             AND (WORK_ORDER_ID = p_WORK_ORDER_ID) -- OR p_WORK_ORDER_ID = 0 )
             AND (SUBTASK_ID = p_SUBTASK_ID) -- OR p_SUBTASK_ID = 0 )           
             AND (CLIN_ID = p_CLIN_ID) -- OR p_CLIN_ID = 0 )           
             AND (SUB_CLIN_ID = p_SUB_CLIN_ID) -- OR p_SUB_CLIN_ID = 0 )                       
          ORDER BY 9 asc ,1;          
          END;
          
          END IF; 
          
        EXCEPTION
        WHEN OTHERS THEN
          OPEN REC_CURSOR FOR SELECT 1 FROM TASK_CONTRACTORS ;  
      END SP_GET_CLIN_TASK_CONTRACTORS;   
  
  PROCEDURE SP_UPDATE_SUBCONTRACTOR_CODES 
  (
      P_SUBCONTRACTORID IN SUB_CONTRACTOR.SUB_CONTRACTOR_ID%TYPE
    , P_SMALL_BUSINESS_CODES IN SUB_CONTRACTOR.SMALL_BUSINESS%TYPE
    , P_CONTRACT_NUMBER IN SUB_CONTRACTOR.CONTRACT_NUMBER%TYPE
    , P_USERID IN SUB_CONTRACTOR.CREATED_BY%TYPE 
    , P_PSTATUS OUT VARCHAR2 
  ) AS 
  BEGIN
    
    /*
      Author: Sai Allu
      Date Created : 07/05/2016
      Purpose:  Updates small business codes of a sub contractor
    */      
    
    SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_UPDATE_SUBCONTRACTOR_CODES update of small business codes SUBCONTRACTORID= '||P_SUBCONTRACTORID);
    
    UPDATE SUB_CONTRACTOR SET 
      SMALL_BUSINESS = P_SMALL_BUSINESS_CODES,
      LAST_MODIFIED_BY = P_USERID,
      LAST_MODIFIED_ON = SYSDATE
    WHERE 
      SUB_CONTRACTOR_ID = P_SUBCONTRACTORID AND CONTRACT_NUMBER = P_CONTRACT_NUMBER;
      
    IF SQL%FOUND THEN
      BEGIN
        P_PSTATUS := 'SUCCESS';
        RETURN;
      END;
    END IF;
  
    EXCEPTION WHEN OTHERS THEN
    BEGIN
      P_PSTATUS := SQLERRM;
      RETURN;
    END;
    
  END SP_UPDATE_SUBCONTRACTOR_CODES;
 PROCEDURE SP_GET_Travel_TASK_CONTRACTORS(
      p_UserId        VARCHAR2 DEFAULT NULL ,
      p_CONTRACT_NUMBER VARCHAR2 DEFAULT NULL ,
      p_WORK_ORDER_ID         IN TASK_CONTRACTORS.WORK_ORDER_ID%TYPE DEFAULT 0,
      p_SUBTASK_ID            IN TASK_CONTRACTORS.SUBTASK_ID%TYPE DEFAULT 0,
      p_CLIN_ID NUMBER  DEFAULT 0,
      p_SUB_CLIN_ID NUMBER DEFAULT 0,
      p_LABOR_CATEGORY_ID  NUMBER  DEFAULT 0,              
      REC_CURSOR OUT SYS_REFCURSOR)      AS 
 /*Procedure : SP_GET_Travel_TASK_CONTRACTORS
  Author: Sridhar Kommana
  Date Created : 07/08/2016
  Purpose:  Give contractors for a particular Travel clin
  Update history:
*/
      v_clin_type VARCHAR2(20) ;
      BEGIN 
         SP_INSERT_AUDIT(p_UserId, 'PKG_SUB_CONTRACTOR.SP_GET_Travel_TASK_CONTRACTORS  p_CONTRACT_NUMBER= '||p_CONTRACT_NUMBER
        ||'  p_WORK_ORDER_ID= '||p_WORK_ORDER_ID
         ||' p_SUBTASK_ID= '||p_SUBTASK_ID
         ||' p_SUBTASK_ID= '||p_SUBTASK_ID
         ||' p_CLIN_ID= '||p_CLIN_ID
         ||' p_SUB_CLIN_ID= '||p_SUB_CLIN_ID         
         ||' p_LABOR_CATEGORY_ID= '||p_LABOR_CATEGORY_ID   
         );
         select clin_type into v_clin_type from pop_clin where clin_id = p_clin_id;
         if v_clin_type = 'Travel' then 
         BEGIN 
          OPEN REC_CURSOR FOR 
          SELECT DISTINCT
            CT.CONTRACTOR_ID,
            FIRST_NAME,
            MIDDLE_NAME,
            LAST_NAME,
            LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
            EMAIL,
            VENDOR,
            CONTRACT_NUMBER,
            upper(LAST_NAME) 
           -- CLIN_ID,
            --SUB_CLIN_ID,
           -- 0 as  LABOR_CATEGORY_ID
            FROM CONTRACTORS_T CT left outer join  TASK_CONTRACTORS TC ON CT.CONTRACTOR_ID = TC.CONTRACTOR_ID
            WHERE (CONTRACT_NUMBER = p_CONTRACT_NUMBER) -- OR p_CONTRACT_NUMBER is null)
             AND (WORK_ORDER_ID = p_WORK_ORDER_ID) -- OR p_WORK_ORDER_ID = 0 )
             AND (SUBTASK_ID = p_SUBTASK_ID) -- OR p_SUBTASK_ID = 0 )           
             AND (CLIN_ID in (select clin_id from pop_clin where period_of_performance_id  = (select period_of_performance_id from pop_clin where clin_id =  p_CLIN_ID) ))          
             AND (SUB_CLIN_ID = p_SUB_CLIN_ID) -- OR p_SUB_CLIN_ID = 0 )           
          --  AND (LABOR_CATEGORY_ID = p_LABOR_CATEGORY_ID or p_LABOR_CATEGORY_ID = 0)           
          ORDER BY 9 asc ,1;
          END;
          ELSE
          BEGIN 
             OPEN REC_CURSOR FOR 
          SELECT DISTINCT
            CT.CONTRACTOR_ID,
            FIRST_NAME,
            MIDDLE_NAME,
            LAST_NAME,
            LAST_NAME ||', '|| FIRST_NAME ||' '||MIDDLE_NAME as FULL_NAME,    
            EMAIL,
            VENDOR,
            CONTRACT_NUMBER,
            upper(LAST_NAME), 
            CLIN_ID,
            SUB_CLIN_ID
           -- LABOR_CATEGORY_ID
            FROM CONTRACTORS_T CT left outer join  TASK_CONTRACTORS TC ON CT.CONTRACTOR_ID = TC.CONTRACTOR_ID
            WHERE (CONTRACT_NUMBER = p_CONTRACT_NUMBER) -- OR p_CONTRACT_NUMBER is null)
             AND (WORK_ORDER_ID = p_WORK_ORDER_ID) -- OR p_WORK_ORDER_ID = 0 )
             AND (SUBTASK_ID = p_SUBTASK_ID) -- OR p_SUBTASK_ID = 0 )           
             AND (CLIN_ID = p_CLIN_ID) -- OR p_CLIN_ID = 0 )           
             AND (SUB_CLIN_ID = p_SUB_CLIN_ID) -- OR p_SUB_CLIN_ID = 0 )                       
          ORDER BY 9 asc ,1;          
          END;
          
          END IF; 
          
        EXCEPTION
        WHEN OTHERS THEN
          OPEN REC_CURSOR FOR SELECT 1 FROM TASK_CONTRACTORS ;  
      END SP_GET_Travel_TASK_CONTRACTORS;   
    
END PKG_SUB_CONTRACTOR;
/