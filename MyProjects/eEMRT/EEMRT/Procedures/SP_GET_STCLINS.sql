CREATE OR REPLACE PROCEDURE eemrt.SP_GET_STCLINS(
    P_SubTaskID                   NUMBER DEFAULT 0 ,
    p_WORK_ORDERS_ID           NUMBER DEFAULT 0 ,
    p_UserId                   VARCHAR2 DEFAULT NULL ,
    REC_CURSOR OUT SYS_REFCURSOR)
AS
  /*
  Procedure : SP_GET_STCLINS
  Author: Sridhar Kommana
  Date Created : 08/13/2015
  Purpose:  Get Clin hours and type info for a sub-task
  Update history:
  */
  p_status VARCHAR2(100);
BEGIN
  SP_INSERT_AUDIT(p_UserId, 'SP_GET_STCLINS: Get sub-task CLIN details P_SubTaskID='||P_SubTaskID||  'p_WORK_ORDERS_ID='||p_WORK_ORDERS_ID);
  --pkg_work_orders.Delete_ST_CLINS_SESSION(p_UserId,p_status);
  OPEN REC_CURSOR FOR
  SELECT DISTINCT
    DECODE(CLIN_SUB_CLIN, 'Y', CLIN_NUMBER ||SUB_CLIN_NUMBER,CLIN_NUMBER ) AS SUB_CLIN_NUMBER_DISP, NVL(SUB_CLIN_TITLE,CLIN_TITLE) CLIN_TITLE_DISP, LABOR_CATEGORY_TITLE, 
    CLIN_TYPE_DISP, SUM(ST_CLIN_HOURS) ST_CLIN_HOURS , ST_CLIN_Rate, SUM(ST_CLIN_AMOUNT) ST_CLIN_AMOUNT
  FROM
          (
        SELECT C.CLIN_NUMBER,
        SC.SUB_CLIN_NUMBER,
        SC.SUB_CLIN_TYPE ,
        C.CLIN_TYPE ,
        NVL(ST_CLIN_TYPE, NVL(SC.SUB_CLIN_TYPE ,C.CLIN_TYPE)) AS CLIN_TYPE_DISP,
        C.CLIN_SUB_CLIN ,
        C.CLIN_TITLE ,
        SC.SUB_CLIN_TITLE ,
        0 LABOR_CATEGORY_ID,
        ''                                              AS LABOR_CATEGORY_TITLE ,
        NVL(C.CLIN_HOURS,0) + NVL(SC.SUB_CLIN_HOURS,0)  AS CLIN_HOURS,
        NVL(C.CLIN_RATE,0)  + NVL(SC.SUB_CLIN_RATE,0)   AS CLIN_RATE,
        NVL(C.CLIN_AMOUNT,0)+ NVL(SC.SUB_CLIN_AMOUNT,0) AS CLIN_AMOUNT,
        W.STC_ID,
        WORK_ORDERS_ID,
        NVL(W.CLIN_HOURS,0) ST_CLIN_HOURS,
        ST_Rate AS ST_CLIN_RATE,
        NVL(W.CLIN_AMOUNT,0) ST_CLIN_AMOUNT ,
        C.LABOR_RATE_TYPE,
        SC.LABOR_RATE_TYPE AS SC_LABOR_RATE_TYPE,
        RATE_TYPE
      FROM POP_CLIN C
      LEFT OUTER JOIN SUB_CLIN SC
      ON (SC.CLIN_ID = C.CLIN_ID )
      INNER JOIN PERIOD_OF_PERFORMANCE POP
      ON C.PERIOD_OF_PERFORMANCE_ID = POP.PERIOD_OF_PERFORMANCE_ID
      INNER JOIN SUB_TASKS_CLINS W
      ON ( (W.CLIN_ID       = C.CLIN_ID  AND W.SUB_CLIN_ID     = SC.SUB_CLIN_ID) OR ( W.CLIN_ID        = C.CLIN_ID  AND (W.SUB_CLIN_ID   IS NULL   OR W.SUB_CLIN_ID      =0) ) )
      AND (W.WORK_ORDERS_ID = p_WORK_ORDERS_ID ) 
      AND (W.FK_Sub_Tasks_ID = P_SubTaskID OR P_SubTaskID=0)
UNION
    SELECT 
      C.CLIN_NUMBER,
      SC.SUB_CLIN_NUMBER,
      SC.SUB_CLIN_TYPE ,
      C.CLIN_TYPE ,
      'Labor' AS CLIN_TYPE_DISP,
      C.CLIN_SUB_CLIN ,
      C.CLIN_TITLE ,
      SC.SUB_CLIN_TITLE ,
      CLC.LABOR_CATEGORY_ID,
      CLC.LABOR_CATEGORY_TITLE , --L.CATEGORY_NAME AS DESCRIPTION,
      NVL(C.CLIN_HOURS,0) + NVL(SC.SUB_CLIN_HOURS,0)  AS CLIN_HOURS,
      NVL(C.CLIN_RATE,0)  + NVL(SC.SUB_CLIN_RATE,0)   AS CLIN_RATE,
      NVL(C.CLIN_AMOUNT,0)+ NVL(SC.SUB_CLIN_AMOUNT,0) AS CLIN_AMOUNT,
      W.ST_LABOR_CATEGORY_ID STC_ID,
      WORK_ORDERS_ID,
      NVL(W.LABOR_CATEGORY_HOURS,0) ST_CLIN_HOURS,
      NVL(W.LABOR_CATEGORY_Rate,0) ST_CLIN_RATE,
      LC_AMOUNT AS ST_CLIN_AMOUNT ,
      C.LABOR_RATE_TYPE,
      SC.LABOR_RATE_TYPE AS SC_LABOR_RATE_TYPE,
      RATE_TYPE
    FROM POP_CLIN C
    LEFT OUTER JOIN SUB_CLIN SC
    ON (SC.CLIN_ID = C.CLIN_ID)
    INNER JOIN PERIOD_OF_PERFORMANCE POP
    ON C.PERIOD_OF_PERFORMANCE_ID = POP.PERIOD_OF_PERFORMANCE_ID
    INNER JOIN ST_LABOR_CATEGORY W
    ON ( W.CLIN_ID = C.CLIN_ID
    OR ( W.CLIN_ID = SC.CLIN_ID ))
    INNER JOIN CLIN_LABOR_CATEGORY CLC
    ON CLC.LABOR_CATEGORY_ID    = W.LABOR_CATEGORY_ID
    AND CLC.CLIN_ID             = W.CLIN_ID
    AND (W.WORK_ORDERS_ID       = p_WORK_ORDERS_ID )
    AND (W.Sub_Tasks_ID = P_SubTaskID OR P_SubTaskID=0)
    ) TBLCLINS
  GROUP BY --- STC_ID,
    DECODE(CLIN_SUB_CLIN, 'Y', CLIN_NUMBER
    ||SUB_CLIN_NUMBER,CLIN_NUMBER ) , NVL(SUB_CLIN_TITLE,CLIN_TITLE) , LABOR_CATEGORY_TITLE, CLIN_TYPE_DISP, ST_CLIN_Rate
  ORDER BY 1 ;
EXCEPTION
WHEN OTHERS THEN
  OPEN REC_CURSOR FOR 
  SELECT   0 SUB_CLIN_NUMBER_DISP, 0 CLIN_TITLE_DISP, 0 LABOR_CATEGORY_TITLE, 0 CLIN_TYPE_DISP, 0 ST_CLIN_HOURS , 0 ST_CLIN_Rate, 0 ST_CLIN_AMOUNT from dual;
END SP_GET_STCLINS;
/